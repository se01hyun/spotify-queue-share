<context>
# Overview  
모두의 플레이리스트는 다수의 사용자가 각자의 기기에서 Spotify Premium 계정을 통해 음악을 검색하고 현재 재생 중인 플레이리스트에 추가하여, 특정 호스트의 기기에서 해당 음악을 공동으로 감상할 수 있도록 돕는 웹 애플리케이션(PWA)입니다. 

현재 음악 감상 환경에서는 여러 명이 함께 음악을 고르기 어렵고, 기기 의존성으로 인해 한 사람의 휴대폰으로만 음악을 틀어야 하는 번거로움이 있습니다. 본 서비스는 이러한 문제를 해결하여 모든 참가자가 실시간으로 플레이리스트를 공동으로 관리하고 완성하는 협업 경험을 제공합니다.

# Core Features  
## 호스트 기능
- **세션 생성 및 관리**: Spotify Premium 계정으로 로그인하여 새로운 음악 세션(방)을 생성하고, 고유 링크 또는 QR 코드를 생성하여 공유
- **음악 재생 제어**: 세션 내 추가된 음악의 현재 재생 큐 확인, 다음 곡 스킵, 이전 곡 재생, 일시 정지/재생 기능 (Spotify API를 통한 제어)
- **세션 기록 관리**: 이전 세션의 플레이리스트 및 참여자 기록 확인

## 게스트 기능
- **세션 접속**: 호스트가 공유한 링크 또는 QR 코드를 통해 세션에 접속 (로그인 불필요, 익명 참여 가능)
- **음악 검색**: Spotify API를 통해 실시간으로 음악 검색 기능 제공, 검색 결과(곡명, 아티스트, 앨범 커버 등) 표시
- **음악 큐 추가**: 검색된 음악을 현재 세션의 재생 큐에 추가, 호스트의 Spotify 재생 큐에 실시간으로 반영
- **큐 확인**: 현재 세션의 재생 큐 목록 실시간 확인 (추가된 곡, 순서 등), 자신이 추가한 곡 하이라이트

## 공통 기능
- **PWA (Progressive Web App)**: 웹 브라우저에서 접속 가능하며, 필요시 홈 화면에 추가하여 앱처럼 사용 가능
- **실시간 동기화**: 게스트가 곡을 추가하면 호스트 기기의 큐에 실시간 반영, 모든 참여자가 업데이트된 큐 목록을 실시간으로 확인
- **중복 선곡 방지**: 이미 큐에 추가된 곡은 추가 버튼 비활성화 또는 경고 메시지 표시

# User Experience  
## 사용자 페르소나
- **호스트**: Spotify Premium 계정을 보유한 사용자로, 음악 세션을 주관하고 실제 음악 재생을 담당
- **게스트**: 세션에 참여하여 음악을 검색하고 큐에 추가하는 사용자들 (로그인 불필요)

## 주요 사용자 플로우
1. 호스트가 Spotify로 로그인하여 세션 생성
2. 생성된 링크/QR 코드를 게스트들과 공유
3. 게스트들이 링크를 통해 세션에 접속 (닉네임 설정 가능)
4. 게스트들이 음악을 검색하고 큐에 추가
5. 호스트 기기에서 추가된 음악들이 순서대로 재생

## UI/UX 고려사항
- **간결한 UI**: 검색창, 검색 결과, 큐 목록 등 핵심 기능에 집중한 직관적인 인터페이스
- **쉬운 접근성**: 링크/QR 코드 공유를 통한 낮은 진입 장벽
- **피드백**: 곡 추가 시 성공/실패 여부에 대한 명확한 시각적/텍스트 피드백 제공
- **모바일 최적화**: PWA 특성을 살려 모바일 환경에서 사용하기 편리하도록 디자인
</context>
<PRD>
# Technical Architecture  
## 시스템 구성 요소
- **프런트엔드**: React 기반 PWA, Tailwind CSS 스타일링, Recoil 상태 관리
- **백엔드**: Node.js (Express.js), AWS Lambda (Serverless) 배포
- **데이터베이스**: Supabase (PostgreSQL 기반)
- **외부 API**: Spotify Web API, QR 코드 생성 라이브러리

## 데이터 모델
### sessions 테이블 (세션 정보)
- id (UUID, PK)
- host_user_id (UUID, FK to users.id)
- session_name (Text, Default: "My Music Session")
- created_at, ended_at (Timestamps)
- join_code (Text, Unique) - QR/Link에 사용
- spotify_access_token, spotify_refresh_token (Encrypted)
- host_spotify_device_id (Text) - 호스트의 현재 재생 기기 ID

### users 테이블 (호스트 사용자 정보)
- id (UUID, PK)
- spotify_id (Text, Unique)
- display_name, email, profile_image_url
- created_at (Timestamp)

### added_tracks 테이블 (세션에 추가된 곡 기록)
- id (UUID, PK)
- session_id (UUID, FK)
- spotify_track_id, track_name, artist_name, album_cover_url
- added_by_guest_id (UUID, FK)
- added_at (Timestamp)
- is_played (Boolean), play_order (Integer)

### session_participants 테이블 (세션 참여자 기록)
- id (UUID, PK)
- session_id (UUID, FK)
- guest_nickname (Text, Default: "익명 참가자")
- joined_at, left_at (Timestamps)

## APIs 및 통합
- **Spotify Web API**: OAuth 2.0 인증, 검색 API, Player API (재생 큐 추가, 재생 제어)
- **Supabase**: Authentication, Realtime, Database, Storage
- **실시간 통신**: WebSocket을 통한 실시간 큐 업데이트

## 인프라 요구사항
- **배포**: 프런트엔드는 Vercel, 백엔드는 AWS Lambda
- **보안**: HTTPS 통신, Spotify 토큰 암호화 저장, 세션별 고유 join_code 접근 제어
- **성능**: 실시간 동기화를 위한 WebSocket 연결 관리

# Development Roadmap  
## Phase 1: MVP (핵심 기능)
- Spotify OAuth 2.0 인증 시스템
- 기본 세션 생성 및 관리
- 간단한 음악 검색 및 큐 추가 기능
- 실시간 큐 동기화
- 모바일 반응형 UI

## Phase 2: 사용자 경험 개선
- QR 코드 생성 및 공유 기능
- 게스트 닉네임 설정
- 중복 선곡 방지 기능
- 음악 재생 제어 (스킵, 일시정지 등)
- 세션 기록 저장 및 조회

## Phase 3: 고급 기능
- PWA 기능 (오프라인 캐싱, 홈 화면 추가)
- 세션 내 채팅 기능
- 음악 추천 시스템
- 투표 기능 (다음 곡 선택)
- 세션 테마 설정

## Phase 4: 확장 기능
- 프리미엄 기능 (광고 제거, 고급 통계)
- 다국어 지원
- 소셜 기능 (친구 추가, 세션 공유)
- 고급 분석 및 리포트

# Logical Dependency Chain
## 기초 인프라 구축 (우선순위 1)
1. **Supabase 설정**: 데이터베이스 스키마 생성, 인증 설정
2. **Spotify API 통합**: OAuth 2.0 인증 플로우 구현
3. **기본 백엔드 API**: 세션 생성/관리, 사용자 인증 엔드포인트

## 핵심 기능 개발 (우선순위 2)
4. **프런트엔드 기본 구조**: React 앱 설정, 라우팅, 상태 관리
5. **호스트 기능**: 로그인, 세션 생성, 링크 생성
6. **게스트 기능**: 세션 접속, 음악 검색, 큐 추가
7. **실시간 동기화**: WebSocket 연결, 큐 상태 실시간 업데이트

## 사용성 개선 (우선순위 3)
8. **UI/UX 개선**: 모바일 최적화, 직관적인 인터페이스
9. **에러 처리**: 네트워크 오류, API 한도 초과 등 예외 상황 처리
10. **성능 최적화**: 검색 결과 캐싱, 이미지 최적화

## 고급 기능 추가 (우선순위 4)
11. **PWA 기능**: 서비스 워커, 오프라인 지원
12. **추가 기능**: QR 코드, 채팅, 투표 등

# Risks and Mitigations  
## 기술적 도전과제
- **Spotify API 제한**: API 호출 한도 및 재생 제어 제한 → 효율적인 API 사용 및 캐싱 전략 구현
- **실시간 동기화**: 다수 사용자 동시 접속 시 성능 이슈 → WebSocket 연결 풀링 및 부하 분산
- **모바일 호환성**: 다양한 기기에서의 일관된 경험 → 철저한 크로스 브라우저 테스트

## MVP 범위 설정
- **핵심 기능 우선**: 음악 검색/추가/재생에 집중, 부가 기능은 후순위
- **단계적 개발**: 기본 기능부터 시작하여 점진적으로 기능 확장
- **사용자 피드백**: 초기 사용자 테스트를 통한 기능 검증 및 개선

## 리소스 제약
- **개발 시간**: 단계별 개발로 MVP 먼저 완성 후 기능 확장
- **API 비용**: Spotify API 및 Supabase 사용량 모니터링 및 최적화
- **인프라 비용**: 초기에는 무료 티어 활용, 사용자 증가에 따라 점진적 확장

# Appendix  
## 기술 사양
- **프런트엔드**: React 18+, TypeScript, Tailwind CSS, Recoil
- **백엔드**: Node.js 18+, Express.js, TypeScript
- **데이터베이스**: PostgreSQL (Supabase)
- **배포**: Vercel (프런트엔드), AWS Lambda (백엔드)
- **모니터링**: Supabase Analytics, Vercel Analytics

## 보안 고려사항
- Spotify Access/Refresh Token 암호화 저장
- HTTPS 통신 강제
- 세션별 고유 join_code를 통한 접근 제어
- 개인정보 최소 수집 (게스트 익명 참여)

## 성능 목표
- 페이지 로드 시간: 3초 이내
- 음악 검색 응답 시간: 1초 이내
- 실시간 큐 업데이트: 500ms 이내
- 동시 접속자: 세션당 최대 20명
</PRD>








